ExploitID	DeviceID	ExploitInfoID	ExploitDetail	Script	SamplePCAP	Characteristic
1	1	22	One communication channel through port 49153. <p> If enough traffic is sent to this port the device will get flooded with packets and the device not be able to detect legitimate packets being sent to this port. Device responds to bad packets format. So more communication occurs. The result will be that the actual user will not be able to turn on or off the device resulting in no control of the switch.	scripts/BelkinDDOS.py	pcaps/BelkinDDOS.pcap	Large UDP Traffic Volume to port
2	1	23	"Due to the inability of the WeMo Smart Switch to determine an authenticated user or not, it is extremely easy for an attacker to control the device. A correctly constructed packet will cause the device to turn on and off."	scripts/BelkinControl.py	pcaps/BelkinControl.pcap	"Plaintext in data, HTTP Post Request"
3	2	23	"Use HTTP GET requests on certain URLs such as: <p> <ol type=""A""> <li>Move Right =>[ipaddress]:5004/cgi-bin/camctrl.cgi?move=right</li> <li>Move Left =>[ipaddress]:5004/cgi-bin/camctrl.cgi?move=left</li> <li>Tilt Up =>[ipaddress]:5004/cgi-bin/camctrl.cgi?move=up</li> <li>Tilt Down =>[ipaddress]:5004/cgi-bin/camctrl.cgi?move=down</li> <li>Return to Centre =>[ipaddress]:5004/cgi-bin/camctrl.cgi?move=home</li> </ol> "	scripts/DLinkDCSControl.py	pcaps/DLinkDCSControl.pcap	HTTP Get Request
4	2	9	No encryption was used this meantsthat the video and audio for the device was obtainable through the url: [ip address]:5004/cgi-bin/video.vam. The video is compressed using H.236.	scripts/DLinkDCSVid.py	pcaps/DLinkDCSControl.pcap	HTTP Get Request Initially followed by larger volume of traffic
5	3	9	"The light is on or off, this could be used by an attacker to determine whether the user has left the house or gone to sleep. It reveals how many users are connected to the device. This could be used to determine how many people are inside the home, and finally it shows the last time the Philips Hue Smart bulb was turned on. Using this information an attack could build up the schedule of the smart home user. All of this information is stored and transmitted in plain text, meaning the privacy of the ‘Smart Home‘ residents has been violated."	scripts/PhilipsHuePrivacy.py	pcaps/PhilipsHuePrivacy.pcap	"Plaintext, JSON response"
6	3	23	Once the authorisation ID is known it is possible to change the brightness of the bulb. This could be potentially used to cause seizures by flashing the lights really quick in a person’s home.	scripts/PhilipsHueControl.py	pcaps/PhilipsHueControl.pcap	"Plaintext, JSON response"
7	4	9	There is no expirey date on the token to access the data from the LiFx server. So once this token is discovered it is possible to get connection to the server and obtain Smart Home residents information	scripts/LiFxPrivacy.py	pcaps/LiFxPrivacy.pcap	Repeated Authorization token
8	4	23	"The packet for the control of the light bulbs colour is specifically designed by LiFx. No JSON file format, instead there is no words. However each bits placement in the packet determines the action of the request. Upon analysis the packet size is a 98 byte long UDP packet where  first 4 bytes is the size of the packet (3100 in hex), and the next 4 bytes is the header(0034). The 16 byts between position 74 and 90 control the change in colour.  "	scripts/LiFxControl.py	pcaps/LiFxControl.pcap	Similar packet structure repeated
9	5	7	"Setting up a man in the middle attack, it is possible to see all the data coming from the application to the server. From here we can extract token, and code to resend to the server."	scripts/iHomeMITM.py	pcaps/iHomeMITM.pcap	Duplicate MAC on ARP table
10	5	26	"Looking at the packet after the man in the middle, we can see that the password is sent. The man in the middle attacker can then see that password."	scripts/iHomePassword.py	pcaps/iHomePassword.pcap	"Text ""Pass"" in Json File"
11	5	9	"Once the man in the middle has decrypted the data from the application, they can see all the of the most recent events the switch has been used, including the time. From this an attacker could assume a Smart Home residents schedule"	scripts/iHomePrivacy.py	pcaps/iHomePrivacy.pcap	Repeated Authorization token
12	6	23	"Simply replaying the packet sniffed to the device, the device responds with either on or off."	scripts/TPLinkSwitchControl.py	pcaps/TPLinkSwitchControl.pcap	Similar packet structure repeated
13	6	25	"The packet seemed to have a lot of repeated characters. If we assume that the response would be JSON, the first character would either be '{' or '['. If we XOR the first value of the packet with '{' we see that we get the key number 171. By XORing all the bytes with the key we can decrypt the packet."	scripts/TPLinkSwitchDecrypt.py	pcaps/TPLinkSwitchDecrypt.pcap	Low Entropy
14	7	23	A malicious attacker can upload an xml file to the settings to change the language or power settings of the printer by HTTP Put to the printer	scripts/HPEnvySettings.py	pcaps/HPEnvySettings.pcap	HTTP Put Request
15	7	23	A malicious attacker can get the last scanned document by visiting a url	scripts/HPEnvyScanner.py	pcaps/HPEnvyScanner.pcap	HTTP Get Request
